// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  variants CategoryVariant[]

  @@map("categories")
}

model CategoryVariant {
  id         String              @id @default(cuid())
  name       String
  type       CategoryVariantType
  options    String[]
  categoryId String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("category_variants")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  shortDescription String?
  price            Decimal  @db.Decimal(10, 2)
  discountedPrice  Decimal? @db.Decimal(10, 2)
  sku              String?  @unique
  stockQuantity    Int      @default(0)
  isActive         Boolean  @default(true)
  isFeatured       Boolean  @default(false)
  weight           Decimal? @db.Decimal(8, 2)
  dimensions       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  categories    Category[]
  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isMain    Boolean  @default(false)
  sortOrder Int      @default(0)
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @db.Decimal(10, 2)
  shippingAmount  Decimal     @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("USD")
  notes           String?
  userId          String?
  customerEmail   String
  customerPhone   String?
  shippingAddress Json
  billingAddress  Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  items      OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  productName String
  productSku  String?
  orderId     String
  productId   String
  createdAt   DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  method          String
  transactionId   String?
  gatewayResponse Json?
  orderId         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  productId String
  userId    String?
  customerName String?
  customerEmail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  productId String
  userId    String?
  sessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum CategoryVariantType {
  COLOR
  SIZE
  MATERIAL
  STYLE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
